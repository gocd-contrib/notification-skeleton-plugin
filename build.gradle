/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
}

group = 'com.example.notification.template'
version = '0.1-SNAPSHOT'

// these values that go into plugin.xml
project.ext.pluginDesc = [
        id         : 'com.example.notification.systemout',
        version    : project.version,
        goCdVersion: '16.2.1',
        name       : 'Example Notification Plugin that prints to `System.out`',
        description: 'Some longer description of your plugin goes here',
        vendorName : 'Acme Corp',
        vendorUrl  : 'https://github.com/user/repository'
]

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly "cd.go.plugin:go-plugin-api:${project.pluginDesc.goCdVersion}"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:23.0'
    implementation 'org.apache.commons:commons-lang3:3.8.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation "cd.go.plugin:go-plugin-api:${project.pluginDesc.goCdVersion}"
}

processResources {
    from("src/main/resource-templates") {
        filesMatching('plugin.xml') {
            expand project.pluginDesc
        }

        filesMatching('plugin.properties') {
            expand project.pluginDesc
        }
    }
}

jar {
    from(configurations.runtimeClasspath) {
        into "lib/"
    }
}
